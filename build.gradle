// 프로젝트의 플러그인 의존성 관리를 위한 설정
buildscript {
    ext{        //전역변수 설정
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {      // 각종 라이브러리들의 의존성을 어떤 원격 저장소에서 받을지 정함
        mavenCentral()  // 복잡
//        jcenter()       //더 간단 -> 'jcenter' is deprecated
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

//plugins {
//    id 'java'
//    id 'eclipse'
//    id 'org.springframework.boot'
//    id 'io.spring.dependency-management'
//}

group 'org.example'
version '1.0.1-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {      // 프로젝트 개발에 필요한 의존성들을 선언한다.
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation ('org.projectlombok:lombok:1.18.24')
    annotationProcessor ('org.projectlombok:lombok:1.18.24')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')     // spring data jpa : spring data jpa 추상화 라이브러리
    implementation('org.springframework.boot:spring-boot-starter-mustache')
    implementation('com.h2database:h2')                                         // h2 데이터베이스 : 인메모리 관계형 데이터베이스

    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    implementation('org.springframework.session:spring-session-jdbc')

    implementation("org.mariadb.jdbc:mariadb-java-client")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
//    implementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation ('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly ('org.junit.jupiter:junit-jupiter-engine')

    implementation('org.mariadb.jdbc:mariadb-java-client')
}

test {
    useJUnitPlatform()
}
